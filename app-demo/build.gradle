plugins {
    alias libs.plugins.android.application
    alias libs.plugins.kotlin.android
    alias libs.plugins.kotlin.serialization
    alias(libs.plugins.compose.compiler)
}

android {
    namespace "mobi.lab.components.compose.demo"

    buildFeatures {
        compose true
    }

    kotlinOptions {
        jvmTarget = libs.versions.jvmTarget.get()
    }

    compileOptions {
        sourceCompatibility = JavaVersion.valueOf(libs.versions.javaCompatibility.get())
        targetCompatibility = JavaVersion.valueOf(libs.versions.javaCompatibility.get())
    }

    defaultConfig {
        compileSdk = libs.versions.android.sdk.compile.get().toInteger()
        targetSdkVersion libs.versions.android.sdk.target.get()
        minSdkVersion libs.versions.android.sdk.min.get()
        applicationId "mobi.lab.components.compose.demo"

        versionCode 1
        versionName rootProject.ext.libraryVersion

        // Note: flavor and variant info is added later and after that you will get stuff like
        // name-0.0.1-flavor-debug.apk, name-0.0.1-flavor-release.aab, ..
        setProperty("archivesBaseName", "labcomponents-compose-demo-$versionName")

        println "CONF: versionName is set to: " + versionName
        println "CONF: versionCode is set to: " + versionCode
    }

    signingConfigs {
        releaseSigning {
            storeFile file("signing/signing.keystore")
            storePassword "JthvvZuFHcubhcfdNEwlaozMsBwgStijeJuaUIKsBwrNNCHQdn"
            keyAlias "ComponentsDemo"
            keyPassword "XZdAtrAzsIvTLgqPjpfzxpqEnOENBRRpMZOWgsUXyCXSHolTJo"
        }
        debugSigning {
            storeFile file("signing/debug.keystore")
            storePassword "PzIzJAqvONJmhryYnzDgDfFAXMotnJZQhuPCgbFteBYAmNLbwY"
            keyAlias "ComponentsDemo"
            keyPassword "ouHhtZOSoyLaMOKYPJmZsGdZSOAisscmDNFhMpOkpBUpTzzgbe"
        }
    }
    
    buildTypes {
        release {
            // Proguard is enabled by default
            // (Think about the logging lib before turning this off)
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.releaseSigning
        }

        debug {
            signingConfig signingConfigs.debugSigning
        }
    }

    lint {
        // Workaround for a bug in Kotlin extension's Parcelize
        warning "ParcelCreator"

        // In general we want to check for problems. Any time, all the time.
        checkReleaseBuilds true
        // And fail the build if we have errors
        abortOnError true

        // Level depends on the type of the job
        /// Fail the build if buildNevercodeRelease target is called and we have missing translations!
        warning("MissingTranslation")
        // Error level things
        /// Hardcoded text should not exist or should have case by case exceptions
        error "HardcodedText"
        // Warning level things
        warning "ImpliedQuantity"
        // Retrofit uses Okio and that generates this warning
        warning "InvalidPackage"
        fatal "StopShip"
    }
}

dependencies {
    implementation project(":lib")

    implementation libs.kotlin
    implementation libs.kotlinx.serialization

    // Util
    implementation libs.timber

    // UI
    implementation libs.material

    // Compose
    implementation platform(libs.compose.bom)
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.androidx.ui
    implementation libs.androidx.ui.graphics
    implementation libs.androidx.viewmodel.compose
    androidTestImplementation platform(libs.compose.bom)
    androidTestImplementation libs.androidx.ui.test.junit4
    debugImplementation libs.compose.tooling
    implementation libs.compose.material3
    implementation libs.compose.tooling.preview
    implementation libs.compose.activity
    implementation libs.compose.viewbinding
    // TODO do we need this for swipe refresh or not?
    implementation libs.compose.accompanist.swiperefresh
    debugImplementation libs.androidx.ui.test.manifest

    // Compose Navigation
    implementation libs.androidx.navigation.compose
}

def GROUP_CI_BUILD_TASKS = "Build"

tasks.register('buildAllDebug') {
    group = GROUP_CI_BUILD_TASKS
    description = "Build the debug version"
    dependsOn "build", ":lib:buildLibDebug"
}

tasks.register('buildAllRelease') {
    group = GROUP_CI_BUILD_TASKS
    description = "Build the release version"
    dependsOn "build", ":lib:buildLibRelease"
}
